"""Note: the figure numbers used here are based on the preprint stage
https://doi.org/10.1101/2022.03.04.22271870
"""
from pathlib import Path
import re
from typing import List

import pandas as pd

inclusion_expr = "failed_qc == 0 and excluded == 0"
samplesheet = pd.read_csv("../samples.paper.csv").query(inclusion_expr)
TECHS = ["illumina", "nanopore"]
DST_RESULTS = Path("../../analysis/resistance_prediction/results")
QC_RESULTS = Path("../../data/QC")
VARIANT_RESULTS = Path("../../analysis/baseline_variants/")
PHENOTYPES = Path("../phenotypes.csv")
FIGURES = Path("figures")
TABLES = Path("tables")
FIGURE_EXTS = [".png", ".svg"]
TABLE_EXTS = [".csv", ".tex"]
LOGDIR = Path("logs/rules")
ENVSDIR = Path("envs")
SCRIPTSDIR = Path("scripts")
ILLUMINA_DIST_THRESHOLDS = (5, 12)
NANOPORE_DIST_THRESHOLDS = (6, 12)
MIXED_DIST_THRESHOLDS = (6, 12)
DPI = 300
GB = 1_024

dst_concordance_files = set()
for site, sample in zip(samplesheet["site"], samplesheet["sample"]):
    for tech in TECHS:
        dst_concordance_files.add(
            str(DST_RESULTS / f"concordance/mykrobe/{tech}/{site}/{sample}.mykrobe.csv")
        )

required_files = set()

for ext in FIGURE_EXTS:
    required_files.add(FIGURES / f"figure_1{ext}")
    required_files.add(FIGURES / f"figure_2{ext}")
    required_files.add(FIGURES / f"figure_3{ext}")
    required_files.add(FIGURES / f"figure_4{ext}")
    required_files.add(FIGURES / f"figure_5{ext}")
    required_files.add(FIGURES / f"figure_6{ext}")
    required_files.add(FIGURES / f"figure_S2{ext}")
    required_files.add(FIGURES / f"figure_S3{ext}")
    required_files.add(FIGURES / f"figure_S4{ext}")
    required_files.add(FIGURES / f"figure_S5{ext}")
    required_files.add(FIGURES / f"figure_S6a{ext}")
    required_files.add(FIGURES / f"figure_S6b{ext}")

for ext in TABLE_EXTS:
    required_files.add(TABLES / f"table_1{ext}")
    required_files.add(TABLES / f"table_S2{ext}")


rule all:
    input:
        required_files,


# ===============================
# FIGURES
# ===============================
rule figure_1:
    """Phenotype availability"""
    input:
        phenosheet=PHENOTYPES,
        concordance=dst_concordance_files,
    output:
        multiext(str(FIGURES / "figure_1"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_1.log",
    conda:
        str(ENVSDIR / "figure_1.yaml")
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        xticks=[],
        exclude=("pyrazinamide", "moxifloxacin"),
    script:
        str(SCRIPTSDIR / "figure_1.py")


rule figure_3:
    """Close dotplot"""
    input:
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
        bcftools_matrix=VARIANT_RESULTS / "distance/bcftools.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_3"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_3.log",
    conda:
        str(ENVSDIR / "figure_3.yaml")
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        marker_size=75,
        illumina_thresholds=ILLUMINA_DIST_THRESHOLDS,
        nanopore_thresholds=NANOPORE_DIST_THRESHOLDS,
        close_threshold=20,
        xaxis_label="COMPASS SNP distance",
        yaxis_label="BCFtools SNP distance",
        false_marker="s",
        font_size=14,
    script:
        str(SCRIPTSDIR / "figure_3.py")


rule figure_4:
    """Transmission clusters"""
    input:
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
        bcftools_matrix=VARIANT_RESULTS / "distance/bcftools.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_4"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_4.log",
    conda:
        str(ENVSDIR / "figure_4.yaml")
    params:
        style="default",
        figsize=(13, 13),
        dpi=DPI,
        illumina_thresholds=ILLUMINA_DIST_THRESHOLDS,
        nanopore_thresholds=NANOPORE_DIST_THRESHOLDS,
    script:
        str(SCRIPTSDIR / "figure_4.py")


rule figure_5:
    """Mixed simulations"""
    input:
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
        bcftools_matrix=VARIANT_RESULTS / "distance/bcftools.matrix.csv",
        mixed_matrix=VARIANT_RESULTS / "distance/mixed.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_5"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_5.log",
    conda:
        str(ENVSDIR / "figure_5.yaml")
    resources:
        mem_mb=int(2 * GB),
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        seed=1988,
        thresholds={
            ILLUMINA_DIST_THRESHOLDS[i]: {
                "ont": NANOPORE_DIST_THRESHOLDS[i],
                "mixed": MIXED_DIST_THRESHOLDS[i],
            }
            for i in range(len(ILLUMINA_DIST_THRESHOLDS))
        },
        ratios=[0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9],
        num_simulations=1000,
        legend_loc="lower left",
        nrows=2,
        ncols=1,
        sharex=True,
        sharey=False,
        xaxis_label="Nanopore:Illumina ratio",
    script:
        str(SCRIPTSDIR / "figure_5.py")


rule figure_6:
    """Phenotype DST concordance bar plot"""
    input:
        phenosheet=PHENOTYPES,
        concordance=dst_concordance_files,
        coverage=QC_RESULTS / "report/coverage.csv",
    output:
        multiext(str(FIGURES / "figure_6"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_6.log",
    conda:
        str(ENVSDIR / "figure_6.yaml")
    params:
        style="ggplot",
        figsize=(13, 8),
        dpi=DPI,
        conf_interval=0.95,
        minor_is_susceptible=False,
        ignore_drugs={"pyrazinamide", "moxifloxacin"},
    script:
        str(SCRIPTSDIR / "figure_6.py")


rule figure_S2:
    """Full dotplot"""
    input:
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
        bcftools_matrix=VARIANT_RESULTS / "distance/bcftools.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_S2"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_S2.log",
    conda:
        str(ENVSDIR / "figure_S2.yaml")
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        xaxis_label="COMPASS SNP distance",
        yaxis_label="BCFtools SNP distance",
        font_size=14,
        alpha=0.25,
        linewidth=0.1,
        marker_size=20,
    script:
        str(SCRIPTSDIR / "figure_S2.py")


rule figure_S3:
    """SNP threshold distance sweep"""
    input:
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
        bcftools_matrix=VARIANT_RESULTS / "distance/bcftools.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_S3"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_S3.log",
    conda:
        str(ENVSDIR / "figure_S3.yaml")
    params:
        style="ggplot",
        figsize=(13, 15),
        dpi=DPI,
        illumina_thresholds=ILLUMINA_DIST_THRESHOLDS,
        nanopore_dist_range=(2, 17),
    script:
        str(SCRIPTSDIR / "figure_S3.py")


rule figure_S4:
    """Mixed self distance"""
    input:
        mixed_matrix=VARIANT_RESULTS / "distance/mixed.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_S4"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_S4.log",
    conda:
        str(ENVSDIR / "figure_S4.yaml")
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        xaxis_label="Self SNP distance",
    script:
        str(SCRIPTSDIR / "figure_S4.py")


rule figure_S5:
    """Mixed dotplot"""
    input:
        mixed_matrix=VARIANT_RESULTS / "distance/mixed.matrix.csv",
        compass_matrix=VARIANT_RESULTS / "distance/compass.matrix.csv",
    output:
        multiext(str(FIGURES / "figure_S5"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_S5.log",
    conda:
        str(ENVSDIR / "figure_S5.yaml")
    params:
        style="ggplot",
        figsize=(10, 10),
        dpi=DPI,
        xaxis_label="COMPASS SNP distance",
        yaxis_label="Mixed SNP distance",
        font_size=14,
        alpha=0.25,
        line_width=0.1,
        close_threshold=rules.figure_3.params.close_threshold,
        illumina_thresholds=ILLUMINA_DIST_THRESHOLDS,
        mixed_thresholds=MIXED_DIST_THRESHOLDS,
    script:
        str(SCRIPTSDIR / "figure_S5.py")


rule figure_S6:
    """Effect of depth on DST prediction"""
    input:
        phenosheet=PHENOTYPES,
        concordance=dst_concordance_files,
        coverage=QC_RESULTS / "report/coverage.csv",
    output:
        a=multiext(str(FIGURES / "figure_S6a"), *FIGURE_EXTS),
        b=multiext(str(FIGURES / "figure_S6b"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_S6.log",
    conda:
        str(ENVSDIR / "figure_S6.yaml")
    params:
        style="ggplot",
        figsize=(13, 8),
        dpi=DPI,
        ignore_drugs=rules.figure_6.params.ignore_drugs,
        conf_interval=rules.figure_6.params.conf_interval,
        minor_is_susceptible=rules.figure_6.params.minor_is_susceptible,
        font_size=14,
        xaxis_label="read depth",
    script:
        str(SCRIPTSDIR / "figure_S6.py")


# ===============================
# TABLES
# ===============================
rule table_1:
    """Comparison of Mykrobe-derived Nanopore drug resistance predictions with 
    Illumina predictions
    """
    input:
        concordance=dst_concordance_files,
    output:
        csv=TABLES / "table_1.csv",
        latex=TABLES / "table_1.tex",
    log:
        LOGDIR / "table_1.log",
    conda:
        str(ENVSDIR / "table_1.yaml")
    params:
        conf_interval=0.95,
        drug_order=[
            "Isoniazid",
            "Rifampicin",
            "Ethambutol",
            "Pyrazinamide",
            "Streptomycin",
            "Amikacin",
            "Capreomycin",
            "Kanamycin",
            "Ciprofloxacin",
            "Moxifloxacin",
            "Ofloxacin",
        ],
    script:
        str(SCRIPTSDIR / "table_1.py")


rule table_S2:
    """Comparison of gDST predictions with pDST"""
    input:
        phenosheet=PHENOTYPES,
        concordance=dst_concordance_files,
        coverage=QC_RESULTS / "report/coverage.csv",
    output:
        csv=TABLES / "table_S2.csv",
        latex=TABLES / "table_S2.tex",
    log:
        LOGDIR / "table_S2.log",
    conda:
        str(ENVSDIR / "table_S2.yaml")
    params:
        conf_interval=rules.table_1.params.conf_interval,
        drug_order=rules.table_1.params.drug_order,
        ignore_drugs=rules.figure_6.params.ignore_drugs,
    script:
        str(SCRIPTSDIR / "table_S2.py")


# =====================
# SUBWORKFLOW FOR FIGURE 2
# =====================
TRUTH_SAMPLES = [
    "mada_1-44",
    "mada_102",
    "mada_104",
    "mada_116",
    "mada_125",
    "mada_130",
    "mada_132",
]
FILTERS = [
    ("unfiltered", "#nofilter"),
    ("q25", "-QUAL<25"),
    ("q25K0.9", "-FRS<90%"),
    ("q25K0.9x0.2", "-FED<20%"),
    ("q25K0.9x0.2d5", "-DP<5"),
    ("q25K0.9x0.2d5s1", "-SR<1%"),
    ("q25K0.9x0.2d5s1M30", "-MQ<30"),
    ("q25K0.9x0.2d5s1M30V0.00001", "-VDB<1e-5"),
]
FILTER_OPT_REGEX = re.compile(r"(?P<opt>[a-zA-Z])(?P<val>\d+(\.\d*)?)")


def filter_options(wildcards) -> List[str]:
    filters = wildcards.filters.strip()
    opts = []

    if filters == "unfiltered":
        return opts

    it = FILTER_OPT_REGEX.finditer(filters)
    for m in it:
        val = m.group("val")
        try:
            val = int(val)
        except ValueError:
            try:
                val = float(val)
            except ValueError:
                raise ValueError(f"Can't convert {val} to an int or float")

        if isinstance(val, float):
            val = format(val, "f")
        else:
            val = str(val)

        opts.append(f"-{m.group('opt')} {val}")

    return opts


rule filter_snps:
    input:
        vcf=VARIANT_RESULTS / "nanopore/snp_calls/madagascar/{sample}.snps.bcf",
    output:
        vcf="filtered_snps/{filters}/{sample}.snps.filtered.bcf",
    threads: 1
    resources:
        mem_mb=int(GB),
    params:
        options=" ".join(["-P", "--verbose", "--overwrite"]),
        script=VARIANT_RESULTS / "scripts/apply_filters.py",
        filter_opts=lambda wildcards: " ".join(filter_options(wildcards)),
    log:
        LOGDIR / "filter_snps/{filters}/{sample}.log",
    conda:
        str(VARIANT_RESULTS / "envs/filter.yaml")
    shell:
        """
        python {params.script} {params.options}  {params.filter_opts} \
            -i {input.vcf} \
            -o {output.vcf} 2> {log}
        """


rule index_snps_vcf:
    input:
        vcf=rules.filter_snps.output.vcf,
    output:
        index="filtered_snps/{filters}/{sample}.snps.filtered.bcf.csi",
    container:
        "docker://quay.io/biocontainers/bcftools:1.13--h3a49de5_0"
    log:
        LOGDIR / "index_snps_vcf/{filters}/{sample}.log",
    shell:
        "bcftools index -f -o {output.index} {input.vcf} 2> {log}"


rule evaluate_snps:
    input:
        truth_vcf=VARIANT_RESULTS
        / "truth_eval/compass/{sample}/varifier/recall/truth_vcf/04.truth.bcf",
        truth_idx=VARIANT_RESULTS
        / "truth_eval/compass/{sample}/varifier/recall/truth_vcf/04.truth.bcf.csi",
        query_vcf=rules.index_snps_vcf.input.vcf,
        query_idx=rules.index_snps_vcf.output.index,
        ref=VARIANT_RESULTS / "resources/h37rv.fa",
        ref_idx=VARIANT_RESULTS / "resources/h37rv.fa.fai",
        mask=VARIANT_RESULTS / "resources/compass-mask.bed",
    output:
        summary="evaluate_snps/{filters}/{sample}/{sample}.summary.csv",
        outdir=directory("evaluate_snps/{filters}/{sample}"),
    resources:
        mem_mb=lambda wildcards, attempt: int(8 * GB) * attempt,
    threads: 8
    log:
        LOGDIR / "evaluate_snps/{filters}/{sample}.log",
    container:
        "docker://quay.io/biocontainers/hap.py:0.3.14--py27h5c5a3ab_0"
    params:
        opts=" ".join(
            (
                "--set-gt hom",
                "--pass-only",
                "--write-vcf",
                "--leftshift",
            )
        ),
    shell:
        """
        hap.py {params.opts} -o {output.outdir}/{wildcards.sample} --threads {threads} \
          -r {input.ref} -T ^{input.mask} {input.truth_vcf} {input.query_vcf} 2> {log}
        """


rule figure_2:
    input:
        bcftools_results=expand(
            "evaluate_snps/{filters}/{sample}/{sample}.summary.csv",
            filters=[t[0] for t in FILTERS],
            sample=TRUTH_SAMPLES,
        ),
        compass_results=expand(
            VARIANT_RESULTS / "truth_eval/compass/{sample}/happy/{sample}.summary.csv",
            sample=TRUTH_SAMPLES,
        ),
    output:
        multiext(str(FIGURES / "figure_2"), *FIGURE_EXTS),
    log:
        LOGDIR / "figure_2.log",
    conda:
        str(ENVSDIR / "figure_2.yaml")
    params:
        style="ggplot",
        dpi=DPI,
        figsize=(13, 13),
        yticks=[
            0.80,
            0.85,
            0.9,
            0.95,
            0.97,
            0.99,
            0.995,
            0.997,
            0.999,
            0.9995,
            0.9997,
            0.9999,
        ],
        font_size=14,
        xrotation=90,
        left_fig="recall",
        right_fig="precision",
        filters=FILTERS,
    script:
        str(SCRIPTSDIR / "figure_2.py")
