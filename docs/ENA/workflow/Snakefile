from pathlib import Path
from typing import Set
import os

import pandas as pd


configfile: "config/config.yaml"


samplesheet = pd.read_csv(config["samplesheet"])
data_dir = Path(config["data_dir"])
containers = config["containers"]
log_dir = Path("logs/stderr")
asm_dir = Path(config["asm_dir"])
results = Path("results")
output: Set[Path] = set()
for i, row in samplesheet.iterrows():
    site = row.site
    run = row.run
    output.add(Path(data_dir / f"archive/{site}.{run}.md5"))
    if row["pacbio"] == 1:
        sample = row["sample"]
        output.add(results / f"asm/{sample}.fa.gz")


envvars:
    "UNAME",
    "PASSWD",


rule all:
    input:
        output,


rule create_samples_xml:
    input:
        sheet=config["samplesheet"],
    output:
        xml=results / "samples/samples.xml",
    params:
        script="scripts/samples2xml.py",
    log:
        log_dir / "create_samples_xml.log",
    conda:
        "workflow/envs/samples2xml.yaml"
    shell:
        "python {params.script} {input.sheet} > {output.xml} 2> {log}"


rule submit_samples:
    input:
        samples=rules.create_samples_xml.output.xml,
        submission="resources/submission.xml",
    output:
        response=results / "samples/response.xml",
    log:
        log_dir / "submit_samples.log",
    container:
        containers["curl"]
    params:
        url="https://wwwdev.ebi.ac.uk/ena/submit/drop-box/submit/",
        uname=os.environ["UNAME"],
        passwd=os.environ["PASSWD"],
    shell:
        """
        curl -u {params.uname}:{params.passwd} \
          -F "SUBMISSION=@{input.submission}" \
          -F "SAMPLE=@{input.samples}" \
          {params.url} > {output.response} 2> {log}
        """


rule archive_raw_nanopore:
    input:
        fast5_dir=data_dir / "{site}/nanopore/raw_data/{run}/multi_fast5s",
    output:
        archive=data_dir / "archive/{site}.{run}.tar.gz",
    log:
        log_dir / "archive_raw_nanopore/{site}/{run}.log",
    container:
        containers["base"]
    params:
        opts="c -z -v",
    shell:
        "tar {params.opts} -f {output.archive} {input.fast5_dir} 2> {log}"


rule generate_nanopore_checksum:
    input:
        archive=rules.archive_raw_nanopore.output.archive,
    output:
        checksum=data_dir / "archive/{site}.{run}.md5",
    log:
        log_dir / "generate_nanopore_checksum/{site}/{run}.log",
    container:
        containers["base"]
    shell:
        "md5sum {input.archive} > {output.checksum} 2> {log}"


rule unwrap_and_compress_assemblies:
    input:
        asm=asm_dir / "{sample}/flye/pacbio/decontam.assembly.flye.pacbio.fasta",
    output:
        asm=results / "asm/{sample}.fa.gz",
    log:
        log_dir / "unwrap_and_compress_assemblies/{sample}.log",
    container:
        containers["seqkit"]
    shell:
        "seqkit seq -w 0 -o {output.asm} {input.asm} 2> {log}"


# todo: create read manifest files https://ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html
# todo: submit read data with Webin-CLI https://ena-docs.readthedocs.io/en/latest/submit/general-guide/webin-cli.html
