from pathlib import Path
from typing import Set
import os

import pandas as pd


configfile: "config/config.yaml"


GB = 1_024
samplesheet = pd.read_csv(config["samplesheet"])
data_dir = Path(config["data_dir"])
reads_dir = Path(config["reads_dir"])
containers = config["containers"]
log_dir = Path("logs/stderr")
asm_dir = Path(config["asm_dir"])
results = Path("results")
output: Set[Path] = set()
receipts: Set[Path] = set()

output.add(results / "reads/accessions.csv")
for i, row in samplesheet.iterrows():
    site = row.site
    run = row.run
    sample = row["sample"]
    output.add(Path(data_dir / f"archive/{site}.{run}.md5"))
    if row["pacbio"] == 1:
        output.add(results / f"asm/genome/{sample}/receipt.xml")
        receipts.add(
            results / f"reads/pacbio/{sample}/reads/{sample}-pacbio/submit/receipt.xml"
        )

    if pd.isna(row["illumina_run_accession"]):  # illumina data hasn't been submitted
        receipts.add(
            results
            / f"reads/illumina/{sample}/reads/{sample}-illumina/submit/receipt.xml"
        )

    receipts.add(
        results / f"reads/nanopore/{sample}/reads/{sample}-nanopore/submit/receipt.xml"
    )


rule all:
    input:
        output,


rule create_samples_xml:
    input:
        sheet=config["samplesheet"],
    output:
        xml=results / "samples/samples.xml",
    params:
        script="workflow/scripts/samples2xml.py",
    log:
        log_dir / "create_samples_xml.log",
    conda:
        "envs/samples2xml.yaml"
    shell:
        "python {params.script} {input.sheet} > {output.xml} 2> {log}"


rule submit_samples:
    input:
        samples=rules.create_samples_xml.output.xml,
        submission="resources/submission.xml",
    output:
        response=results / "samples/response.xml",
    log:
        log_dir / "submit_samples.log",
    conda:
        "envs/curl.yaml"
    params:
        url="https://www.ebi.ac.uk/ena/submit/drop-box/submit/",
        uname=os.environ["UNAME"],
        passwd=os.environ["PASSWD"],
    shell:
        """
        curl -u {params.uname}:{params.passwd} \
          -F "SUBMISSION=@{input.submission}" \
          -F "SAMPLE=@{input.samples}" \
          {params.url} > {output.response} 2> {log}
        """


rule add_sample_accessions_to_sheet:
    input:
        xml=rules.submit_samples.output.response,
    output:
        csv=results / "samples/accessions.csv",
    log:
        log_dir / "add_sample_accessions_to_sheet.log",
    container:
        containers["python"]
    script:
        "scripts/add_sample_accessions_to_sheet.py"


rule archive_raw_nanopore:
    input:
        fast5_dir=data_dir / "{site}/nanopore/raw_data/{run}/multi_fast5s",
    output:
        archive=data_dir / "archive/{site}.{run}.tar.gz",
    log:
        log_dir / "archive_raw_nanopore/{site}/{run}.log",
    container:
        containers["base"]
    params:
        opts="c -z -v",
    shell:
        "tar {params.opts} -f {output.archive} {input.fast5_dir} 2> {log}"


rule generate_nanopore_checksum:
    input:
        archive=rules.archive_raw_nanopore.output.archive,
    output:
        checksum=data_dir / "archive/{site}.{run}.md5",
    log:
        log_dir / "generate_nanopore_checksum/{site}/{run}.log",
    container:
        containers["base"]
    shell:
        "md5sum {input.archive} > {output.checksum} 2> {log}"


rule unwrap_and_compress_assemblies:
    input:
        asm=asm_dir / "{sample}/flye/pacbio/decontam.assembly.flye.pacbio.fasta",
    output:
        asm=results / "asm/{sample}.fa.gz",
    log:
        log_dir / "unwrap_and_compress_assemblies/{sample}.log",
    container:
        containers["seqkit"]
    shell:
        "seqkit seq -w 0 -o {output.asm} {input.asm} 2> {log}"


rule create_read_manifest:
    input:
        samples=rules.add_sample_accessions_to_sheet.output.csv,
        info=config["samplesheet"],
    output:
        manifest=results / "reads/{tech}/{sample}/manifest.{tech}.{sample}.tsv",
    log:
        log_dir / "create_read_manifest/{tech}/{sample}.log",
    params:
        project=config["project"],
        gridion=config["gridion"],
        nextseq=config["NextSeq"],
        reads_dir=reads_dir,
        data_dir=data_dir,
    conda:
        "envs/create_read_manifest.yaml"
    script:
        "scripts/create_read_manifest.py"


rule submit_read_data:
    input:
        manifest=rules.create_read_manifest.output.manifest,
    output:
        receipt=results / "reads/{tech}/{sample}/reads/{sample}-{tech}/submit/receipt.xml",
    log:
        results / "reads/{tech}/{sample}/mresponse.{tech}.{sample}.log",
    conda:
        "envs/submit_read_data.yaml"
    params:
        context="reads",
        uname=os.environ["UNAME"],
        passwd_envvar="PASSWD",
        opts="-submit",
    resources:
        mem_mb=lambda wildcards, attempt: int(4 * GB) * attempt,
    shell:
        """
        ena-webin-cli {params.opts} -context {params.context} -manifest {input.manifest} \
          -username {params.uname} -passwordEnv={params.passwd_envvar} -inputDir / &> {log}
        """


rule add_run_accessions_to_sheet:
    input:
        receipts=receipts,
    output:
        sheet=results / "reads/accessions.csv",
    log:
        log_dir / "add_run_accessions_to_sheet.log",
    container:
        containers["python"]
    script:
        "scripts/add_run_accessions_to_sheet.py"


rule create_asm_manifest:
    input:
        asm=rules.unwrap_and_compress_assemblies.output.asm,
        samples=rules.add_sample_accessions_to_sheet.output.csv,
        runs=rules.add_run_accessions_to_sheet.output.sheet,
    output:
        manifest=results / "asm/{sample}.manifest.tsv",
    log:
        log_dir / "create_asm_manifest/{sample}.log",
    conda:
        "envs/create_asm_manifest.yaml"
    params:
        project=config["project"],
        data_dir=data_dir,
    script:
        "scripts/create_asm_manifest.py"


rule submit_asm_data:
    input:
        manifest=rules.create_asm_manifest.output.manifest,
    output:
        receipt=results / "asm/genome/{sample}/receipt.xml",
    log:
        log_dir / "submit_asm_data/{sample}.log",
    conda:
        "envs/submit_read_data.yaml"
    params:
        context="genome",
        uname=os.environ["UNAME"],
        passwd_envvar="PASSWD",
        opts="-test -submit",
    resources:
        mem_mb=lambda wildcards, attempt: int(4 * GB) * attempt,
    shell:
        """
        ena-webin-cli {params.opts} -context {params.context} -manifest {input.manifest} \
          -username {params.uname} -passwordEnv={params.passwd_envvar} -inputDir / &> {log}
        """
