import itertools
from pathlib import Path

from snakemake.utils import min_version

min_version("5.10.0")

# ======================================================
# Config files
# ======================================================
configfile: "config.yaml"
containers = config["containers"]
envs = config["envs"]
scripts = config["scripts"]
H37RV = config["h37rv"]

outdir = Path(config["outdir"])
data_dir = Path(config["data_dir"])
mada_dir = data_dir / "madagascar"
illumina_dir = mada_dir / "illumina"
ont_dir = mada_dir / "nanopore"
pacbio_dir = mada_dir / "pacbio"
# ======================================================
# Setup
# ======================================================
technologies = ["pacbio", "nanopore", "illumina"]
output_files = set()

for sample, technology in itertools.product(config["samples"], technologies):
    output_files.add(outdir / f"{sample}" / "spades" / "prokka" / "spades.pilon.gff")
    output_files.add(outdir / f"{sample}" / "spades" / "qc" / f"{sample}.pilon.illumina.stats")
    output_files.add(outdir / f"{sample}" / "spades" / "assessment" / f"{sample}.spades.pilon.json")
    output_files.add(outdir / f"{sample}" / "quast" / "report.pdf")

# ======================================================
# Rules
# ======================================================
rule all:
    input:
         list(output_files)


rule trim_illumina:
    input:
        forward = illumina_dir / "{sample}" / "{sample}.R1.fastq.gz",
        reverse = illumina_dir / "{sample}" / "{sample}.R2.fastq.gz",
        adapters = config["adapters"]
    output:
        forward_paired   = outdir / "{sample}" / "trimmed" / "{sample}.R1.trimmed.fastq.gz",
        reverse_paired   = outdir / "{sample}" / "trimmed" / "{sample}.R2.trimmed.fastq.gz",
        forward_unpaired = outdir / "{sample}" / "trimmed" / "{sample}.R1.unpaired.trimmed.fastq.gz",
        reverse_unpaired = outdir / "{sample}" / "trimmed" / "{sample}.R2.unpaired.trimmed.fastq.gz",
    threads: 4
    resources:
        mem_mb = lambda wildcards, attempt: 2000 * attempt
    params:
        illuminaclip = "1:30:10:2:keepBothReads",
        leading = 3,
        trailing = 3,
        minlen = 30,
        in_phred = 33,
        out_phred = 33,
    singularity: containers["trimmomatic"]
    shell:
        """
        trimmomatic PE -threads {threads} -phred{params.in_phred} \
            {input.forward} {input.reverse} \
            {output.forward_paired} {output.forward_unpaired} \
            {output.reverse_paired} {output.reverse_unpaired} \
            ILLUMINACLIP:{input.adapters}:{params.illuminaclip} \
            LEADING:{params.leading} \
            TRAILING:{params.trailing} \
            MINLEN:{params.minlen} \
            TOPHRED{params.out_phred}
        """


"""
Assembly combinations and options:
- Spades with all three techs
- PB only: Flye (PB) -> Arrow (PB)
- PB+I: Flye (PB) -> Uincycler polish
- ONT+I: Flye (ONT) -> Uincycler polish
- PB+ONT: Canu -> Medaka -> Arrow

Polishing options to consider:
- Illumina -> Pilon
- PB: Racon and Arrow
- ONT: Racon and Medaka
- HyPo: Takes all three techs and uses them to polish. https://github.com/kensung-lab/hypo

Quast for assessing
"""
workflows_dir = Path("workflows")
include: str(workflows_dir / "spades.smk")
include: str(workflows_dir / "flye.smk")
include: str(workflows_dir / "quast.smk")
include: str(workflows_dir / "unicycler.smk")
include: str(workflows_dir / "canu.smk")
