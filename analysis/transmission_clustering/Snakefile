import os
from pathlib import Path
from typing import Union, Dict
from itertools import product

import pandas as pd

GB = 1_024
PathLike = Union[str, Path, os.PathLike]


configfile: "config.yaml"


inclusion_expr = "failed_qc == 0 and excluded == 0"
samplesheet = pd.read_csv(config["samplesheet"]).query(inclusion_expr)
containers: Dict[str, PathLike] = config["containers"]
envs: Dict[str, PathLike] = config["envs"]
scripts: Dict[str, PathLike] = config["scripts"]
rule_log_dir = Path("logs/stderr").resolve()
baseline_dir = Path(config["baseline_dir"]).resolve()
pandora_dir = Path(config["pandora_dir"]).resolve()
qc_dir = Path(config["qc_dir"]).resolve()
plot_dir = Path("plots").resolve()
report_dir = Path("report").resolve()

output_files = set()
output_files.add(plot_dir / "dotplot.html")
output_files.add(plot_dir / "close_dotplot.html")
output_files.add(plot_dir / "alt_concordance.html")
output_files.add(report_dir / "mixed_simulations.summary.html")
output_files.add(plot_dir / "mixed_simulations.png")

for caller, thresh in product(config["nanopore_callers"], config["thresholds"]):
    output_files.add(plot_dir / f"clustering/{caller}/t{thresh}/{caller}.clusters.html")
    output_files.add(
        plot_dir / f"clustering/{caller}/t{thresh}/{caller}.confmatrix.png"
    )

# ======================================================
# Sub Workflows
# todo: the subworkflow system is not working with this pipeline for some reason
# ======================================================
# subworkflow pandora:
#     workdir: str(pandora_dir)
#
#
# subworkflow baseline:
#     workdir: str(baseline_dir)


# subworkflow qc:
#     workdir: str(qc_dir)


report: report_dir / "workflow.rst"


rule all:
    input:
        output_files,


def generate_y_names(wildcards, input) -> str:
    names = []
    for fpath in map(Path, input.y_matrices):
        name = fpath.name
        if "pandora" in name:
            name = "pandora_multi" if "multisample" in name else "pandora_single"
        else:
            name = name.split(".")[0]
        names.append(name)
    return ",".join(names)


rule dotplot:
    input:
        x_matrix=baseline_dir / "distance/compass.matrix.csv",
        y_matrices=[
            baseline_dir / "distance/bcftools.matrix.csv",
            pandora_dir / "distance/pandora.sparse.matrix.csv",
            pandora_dir / "distance/pandora.sparse.multisample.distance.csv",
        ],
    output:
        full_plot=report(
            plot_dir / "dotplot.html",
            caption=report_dir / "dotplot.rst",
            category="Distance",
            subcategory="Plot",
        ),
        close_plot=report(
            plot_dir / "close_dotplot.html",
            caption=report_dir / "close_dotplot.rst",
            category="Distance",
            subcategory="Plot",
        ),
    threads: 1
    resources:
        mem_mb=int(2 * GB),
    conda:
        envs["dotplot"]
    params:
        y_matrices_str=lambda wildcards, input: " ".join(
            [f"-y {p}" for p in input.y_matrices]
        ),
        y_names=generate_y_names,
        script=scripts["dotplot"],
        threshold=config["adaptive_threshold"],
        options=" ".join(
            [
                "--title 'Pairwise SNP distances for COMPASS and Nanopore calls'",
                "--delim ,",
            ]
        ),
        close_alpha=0.8,
        full_alpha=0.2,
    log:
        rule_log_dir / "dotplot.log",
    shell:
        """
        python {params.script} {params.options} --alpha {params.full_alpha} \
            -x {input.x_matrix} {params.y_matrices_str} -Y {params.y_names} \
            -o {output.full_plot} 2> {log}

        python {params.script} {params.options} --alpha {params.close_alpha} \
            -x {input.x_matrix} {params.y_matrices_str} -Y {params.y_names} \
            -o {output.close_plot} -T {params.threshold} 2>> {log}
        """



rule clustering:
    input:
        illumina_dist=rules.dotplot.input.x_matrix,
        ont_dist=infer_caller_dist_mtx,
    output:
        report_dir / "cluster_metrics.csv"
    conda:
        envs["clustering"]
    params:
        thresholds=config["bcftools_clustering_thresholds"],
        figsize=(10, 10),
        node_size=400,
    log:
        "report/clustering.processed.ipynb",
    notebook:
        "notebooks/clustering.py.ipynb"


rule mixed_simulations:
    input:
        compass_matrix=rules.dotplot.input.x_matrix,
        bcftools_matrix=baseline_dir / "distance/bcftools.matrix.csv",
        mixed_matrix=baseline_dir / "distance/mixed.matrix.csv",
    output:
        plot=report(
            plot_dir / "mixed_simulations.png",
            caption=report_dir / "mixed_simulations_plot.rst",
            category="Mixed Tech",
            subcategory="Simulations",
        ),
        summary=report(
            report_dir / "mixed_simulations.summary.html",
            caption=report_dir / "mixed_simulations_summary.rst",
            category="Mixed Tech",
            subcategory="Simulations",
        ),
    threads: 1
    resources:
        mem_mb=int(2 * GB),
    conda:
        envs["mixed_simulations"]
    params:
        seed=1988,
        thresholds={
            0: {
                "ont": 0,
                "mixed": 0,
            },
            2: {"ont": 3, "mixed": 2},
            5: {"ont": 5, "mixed": 5},
            12: {"ont": 11, "mixed": 12},
        },
        ratios=[0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9],
        num_simulations=1000,
        figsize=(13, 13),
        dpi=300,
        legend_loc=(0.91, 0.53),
    log:
        rule_log_dir / "mixed_simulations.log",
    script:
        scripts["mixed_simulations"]
