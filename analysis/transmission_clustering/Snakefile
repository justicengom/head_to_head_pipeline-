import os
from pathlib import Path
from typing import Union, Dict
from itertools import product

import pandas as pd

GB = 1_024
PathLike = Union[str, Path, os.PathLike]


configfile: "config.yaml"


inclusion_expr = "failed_qc == 0 and excluded == 0"
samplesheet = pd.read_csv(config["samplesheet"]).query(inclusion_expr)
containers: Dict[str, PathLike] = config["containers"]
envs: Dict[str, PathLike] = config["envs"]
scripts: Dict[str, PathLike] = config["scripts"]
rule_log_dir = Path("logs/stderr").resolve()
baseline_dir = Path(config["baseline_dir"]).resolve()
pandora_dir = Path(config["pandora_dir"]).resolve()
qc_dir = Path(config["qc_dir"]).resolve()
plot_dir = Path("plots").resolve()
report_dir = Path("report").resolve()

output_files = set()
output_files.add(plot_dir / "dotplot.html")
output_files.add(plot_dir / "close_dotplot.html")
output_files.add(plot_dir / "alt_concordance.html")
output_files.add(report_dir / "mixed_simulations.summary.html")
output_files.add(plot_dir / "mixed_simulations.png")

for caller, thresh in product(config["nanopore_callers"], config["thresholds"]):
    output_files.add(plot_dir / f"clustering/{caller}/t{thresh}/{caller}.clusters.html")
    output_files.add(
        plot_dir / f"clustering/{caller}/t{thresh}/{caller}.confmatrix.png"
    )

# ======================================================
# Sub Workflows
# todo: the subworkflow system is not working with this pipeline for some reason
# ======================================================
# subworkflow pandora:
#     workdir: str(pandora_dir)
#
#
# subworkflow baseline:
#     workdir: str(baseline_dir)


# subworkflow qc:
#     workdir: str(qc_dir)


report: report_dir / "workflow.rst"


rule all:
    input:
        output_files,


def generate_y_names(wildcards, input) -> str:
    names = []
    for fpath in map(Path, input.y_matrices):
        name = fpath.name
        if "pandora" in name:
            name = "pandora_multi" if "multisample" in name else "pandora_single"
        else:
            name = name.split(".")[0]
        names.append(name)
    return ",".join(names)


rule dotplot:
    input:
        x_matrix=baseline_dir / "distance/compass.matrix.csv",
        y_matrices=[
            baseline_dir / "distance/bcftools.matrix.csv",
            pandora_dir / "distance/pandora.sparse.matrix.csv",
            pandora_dir / "distance/pandora.sparse.multisample.distance.csv",
        ],
    output:
        full_plot=report(
            plot_dir / "dotplot.html",
            caption=report_dir / "dotplot.rst",
            category="Distance",
            subcategory="Plot",
        ),
        close_plot=report(
            plot_dir / "close_dotplot.html",
            caption=report_dir / "close_dotplot.rst",
            category="Distance",
            subcategory="Plot",
        ),
    threads: 1
    resources:
        mem_mb=int(2 * GB),
    container:
        containers["conda"]
    conda:
        envs["dotplot"]
    params:
        y_matrices_str=lambda wildcards, input: " ".join(
            [f"-y {p}" for p in input.y_matrices]
        ),
        y_names=generate_y_names,
        script=scripts["dotplot"],
        threshold=config["adaptive_threshold"],
        options=" ".join(
            [
                "--title 'Pairwise SNP distances for COMPASS and Nanopore calls'",
                "--delim ,",
            ]
        ),
        close_alpha=0.8,
        full_alpha=0.2,
    log:
        rule_log_dir / "dotplot.log",
    shell:
        """
        python {params.script} {params.options} --alpha {params.full_alpha} \
            -x {input.x_matrix} {params.y_matrices_str} -Y {params.y_names} \
            -o {output.full_plot} 2> {log}

        python {params.script} {params.options} --alpha {params.close_alpha} \
            -x {input.x_matrix} {params.y_matrices_str} -Y {params.y_names} \
            -o {output.close_plot} -T {params.threshold} 2>> {log}
        """


concordance_jsons = set()
for idx, row in samplesheet.iterrows():
    site = row["site"]
    sample = row["sample"]

    for caller in config["nanopore_callers"]:
        if caller == "pandora_map":
            caller_dir = pandora_dir / "concordance/sparse"
        elif caller == "bcftools":
            caller_dir = baseline_dir / "concordance"
        else:
            continue
        concordance_jsons.add(caller_dir / f"{site}/{sample}.concordance.json")


rule plot_concordance:
    input:
        jsons=concordance_jsons,
        coveragesheet=qc_dir / "report/coverage.csv",
    output:
        alt_plot=report(
            plot_dir / "alt_concordance.html",
            caption=f"{report_dir}/alt_concordance.rst",
            category="Concordance",
            subcategory="Plots",
        ),
        gw_plot=report(
            plot_dir / "gw_concordance.html",
            caption=f"{report_dir}/gw_concordance.rst",
            category="Concordance",
            subcategory="Plots",
        ),
        depth_call_rate_plot=report(
            plot_dir / "depth_call_rate.html",
            caption=f"{report_dir}/depth_call_rate.rst",
            category="Concordance",
            subcategory="Plots",
        ),
        depth_gw_call_rate_plot=report(
            plot_dir / "depth_gw_call_rate.html",
            caption=f"{report_dir}/depth_gw_call_rate.rst",
            category="Concordance",
            subcategory="Plots",
        ),
        depth_concordance_plot=report(
            plot_dir / "depth_concordance.html",
            caption=f"{report_dir}/depth_concordance.rst",
            category="Concordance",
            subcategory="Plots",
        ),
        depth_gw_concordance_plot=report(
            plot_dir / "depth_gw_concordance.html",
            caption=f"{report_dir}/depth_gw_concordance.rst",
            category="Concordance",
            subcategory="Plots",
        ),
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: int(0.5 * GB) * attempt,
    params:
        colour_by="caller",
        index="sample",
        log_scale=False,
    container:
        containers["conda"]
    conda:
        envs["plot_concordance"]
    log:
        rule_log_dir / "plot_concordance.log",
    script:
        scripts["plot_concordance"]


def infer_caller_dist_mtx(wildcards) -> str:
    if wildcards.caller == "pandora_map":
        p = pandora_dir / "distance/pandora.sparse.matrix.csv"
    elif wildcards.caller == "pandora_compare":
        p = pandora_dir / "distance/pandora.sparse.multisample.distance.csv"
    elif wildcards.caller == "bcftools":
        p = baseline_dir / "distance/bcftools.matrix.csv"
    else:
        raise NotImplementedError(f"Unrecognised caller {wildcards.caller}")
    return str(p)


def infer_threshold(wildcards) -> str:
    opt = f"-T {wildcards.threshold}"
    if wildcards.caller == "bcftools":
        opt += f",{config['bcftools_clustering_thresholds'][int(wildcards.threshold)]}"
    elif wildcards.caller == "pandora_compare":
        opt += f",{config['compare_clustering_thresholds'][int(wildcards.threshold)]}"
    else:
        opt += f" -A {config['adaptive_threshold']}"
    return opt


rule clustering:
    input:
        compass_dist=rules.dotplot.input.x_matrix,
        query_dist=infer_caller_dist_mtx,
    output:
        report(
            plot_dir / "clustering/{caller}/t{threshold}/{caller}.clusters.html",
            category="Clustering",
            subcategory="Clusters",
            caption=f"{report_dir}/clusters.rst",
        ),
        report(
            plot_dir / "clustering/{caller}/t{threshold}/{caller}.confmatrix.png",
            category="Clustering",
            subcategory="Confusion Matrix",
            caption=f"{report_dir}/confusion_matrix.rst",
        ),
    container:
        containers["conda"]
    conda:
        envs["clustering"]
    params:
        script=scripts["clustering"],
        outdir=lambda wildcards, output: output[0].rpartition("/")[0],
        extras=" ".join(["-S compass,{caller}", "-v"]),
        threshold=infer_threshold,
    log:
        rule_log_dir / "clustering/{caller}/t{threshold}.log",
    shell:
        """
        python {params.script} {params.extras} {params.threshold} \
          -o {params.outdir} {input.compass_dist} {input.query_dist} 2> {log}
        """


rule mixed_simulations:
    input:
        compass_matrix=rules.dotplot.input.x_matrix,
        bcftools_matrix=baseline_dir / "distance/bcftools.matrix.csv",
        mixed_matrix=baseline_dir / "distance/mixed.matrix.csv",
    output:
        plot=report(
            plot_dir / "mixed_simulations.png",
            caption=report_dir / "mixed_simulations_plot.rst",
            category="Mixed Tech",
            subcategory="Simulations",
        ),
        summary=report(
            report_dir / "mixed_simulations.summary.html",
            caption=report_dir / "mixed_simulations_summary.rst",
            category="Mixed Tech",
            subcategory="Simulations",
        ),
    threads: 1
    resources:
        mem_mb=int(2 * GB),
    container:
        containers["conda"]
    conda:
        envs["mixed_simulations"]
    params:
        seed=1988,
        thresholds={
            0: {
                "ont": 0,
                "mixed": 0,
            },
            2: {"ont": 2, "mixed": 2},
            5: {"ont": 5, "mixed": 5},
            12: {"ont": 11, "mixed": 12},
        },
        ratios=[0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9],
        num_simulations=1000,
        figsize=(13, 13),
        dpi=300,
    log:
        rule_log_dir / "mixed_simulations.log",
    script:
        scripts["mixed_simulations"]
